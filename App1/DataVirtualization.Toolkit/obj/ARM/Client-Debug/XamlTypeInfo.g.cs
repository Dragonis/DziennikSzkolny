//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks","4.0.0.0")]
    public sealed class XamlMetaDataProvider: global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.String fullName)
        {
            if(_provider == null)
            {
                _provider = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            string standardName;
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (global::System.String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (global::System.String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType> _xamlTypes = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();
        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember> _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();
        global::System.Collections.Generic.Dictionary<global::System.Type, string> _xamlTypeToStandardName = new global::System.Collections.Generic.Dictionary<global::System.Type, string>();

        private void AddToMapOfTypeToStandardName(global::System.Type t, global::System.String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_PiePlotter() { return new global::DataVirtualization.Toolkit.Plotter.PiePlotter(); }

        private object Activate_1_DataItemCollection() { return new global::DataVirtualization.Toolkit.DataItemCollection(); }

        private object Activate_2_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::DataVirtualization.Toolkit.DataItem>(); }

        private object Activate_3_Collection() { return new global::System.Collections.ObjectModel.Collection<global::DataVirtualization.Toolkit.DataItem>(); }

        private object Activate_4_DataItem() { return new global::DataVirtualization.Toolkit.DataItem(); }

        private object Activate_5_List() { return new global::System.Collections.Generic.List<global::System.String>(); }

        private object Activate_6_PaletteCollection() { return new global::DataVirtualization.Toolkit.PaletteCollection(); }

        private object Activate_7_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Windows.UI.Xaml.ResourceDictionary>(); }

        private object Activate_8_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Windows.UI.Xaml.ResourceDictionary>(); }

        private object Activate_9_Legend() { return new global::DataVirtualization.Toolkit.Legends.Legend(); }

        private object Activate_11_PieDataPoint() { return new global::DataVirtualization.Toolkit.DataPoint.PieDataPoint(); }

        private object Activate_12_DataPoint() { return new global::DataVirtualization.Toolkit.DataPoint.DataPoint(); }

        private object Activate_13_LineDataPoint() { return new global::DataVirtualization.Toolkit.DataPoint.LineDataPoint(); }

        private object Activate_14_PieChart() { return new global::DataVirtualization.Toolkit.Charting.PieChart(); }

        private object Activate_15_Chart() { return new global::DataVirtualization.Toolkit.Charting.Chart(); }

        private object Activate_16_LegendItem() { return new global::DataVirtualization.Toolkit.Legends.LegendItem(); }

        private object Activate_17_MyUserControl1() { return new global::DataVirtualizationToolkit.Themes.MyUserControl1(); }

        private object Activate_18_ToolTip() { return new global::DataVirtualization.Toolkit.ToolTip(); }

        private void VectorAdd_1_DataItemCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::DataVirtualization.Toolkit.DataItem>)instance;
            var newItem = (global::DataVirtualization.Toolkit.DataItem)item;
            collection.Add(newItem);
        }

        private void VectorAdd_2_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::DataVirtualization.Toolkit.DataItem>)instance;
            var newItem = (global::DataVirtualization.Toolkit.DataItem)item;
            collection.Add(newItem);
        }

        private void VectorAdd_3_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::DataVirtualization.Toolkit.DataItem>)instance;
            var newItem = (global::DataVirtualization.Toolkit.DataItem)item;
            collection.Add(newItem);
        }

        private void VectorAdd_5_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.String>)instance;
            var newItem = (global::System.String)item;
            collection.Add(newItem);
        }

        private void VectorAdd_6_PaletteCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.ResourceDictionary>)instance;
            var newItem = (global::Windows.UI.Xaml.ResourceDictionary)item;
            collection.Add(newItem);
        }

        private void VectorAdd_7_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.ResourceDictionary>)instance;
            var newItem = (global::Windows.UI.Xaml.ResourceDictionary)item;
            collection.Add(newItem);
        }

        private void VectorAdd_8_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.ResourceDictionary>)instance;
            var newItem = (global::Windows.UI.Xaml.ResourceDictionary)item;
            collection.Add(newItem);
        }


        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(string typeName)
        {
            global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType userType;

            switch (typeName)
            {
            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.UserControl));
                break;

            case "Double":
                xamlType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Double));
                break;

            case "Object":
                xamlType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Object));
                break;

            case "Int32":
                xamlType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Int32));
                break;

            case "String":
                xamlType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.String));
                break;

            case "Windows.UI.Xaml.ResourceDictionary":
                xamlType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.ResourceDictionary));
                break;

            case "Windows.UI.Xaml.Controls.Orientation":
                xamlType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Orientation));
                break;

            case "Windows.UI.Xaml.Controls.Control":
                xamlType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Control));
                break;

            case "Windows.UI.Xaml.Media.Brush":
                xamlType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.Brush));
                break;

            case "Windows.Foundation.Point":
                xamlType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.Foundation.Point));
                break;

            case "Boolean":
                xamlType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Boolean));
                break;

            case "Windows.UI.Xaml.Controls.Grid":
                xamlType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Grid));
                break;

            case "DataVirtualization.Toolkit.Plotter.PiePlotter":
                userType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DataVirtualization.Toolkit.Plotter.PiePlotter), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_0_PiePlotter;
                userType.AddMemberName("HoleSize");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("PiePalette");
                xamlType = userType;
                break;

            case "DataVirtualization.Toolkit.DataItemCollection":
                userType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DataVirtualization.Toolkit.DataItemCollection), GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection<DataVirtualization.Toolkit.DataItem>"));
                userType.Activator = Activate_1_DataItemCollection;
                userType.CollectionAdd = VectorAdd_1_DataItemCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<DataVirtualization.Toolkit.DataItem>":
                userType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::DataVirtualization.Toolkit.DataItem>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<DataVirtualization.Toolkit.DataItem>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::DataVirtualization.Toolkit.DataItem>),
                                                   "System.Collections.ObjectModel.ObservableCollection<DataVirtualization.Toolkit.DataItem>");
                userType.Activator = Activate_2_ObservableCollection;
                userType.CollectionAdd = VectorAdd_2_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<DataVirtualization.Toolkit.DataItem>":
                userType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::DataVirtualization.Toolkit.DataItem>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::DataVirtualization.Toolkit.DataItem>),
                                                   "System.Collections.ObjectModel.Collection<DataVirtualization.Toolkit.DataItem>");
                userType.Activator = Activate_3_Collection;
                userType.CollectionAdd = VectorAdd_3_Collection;
                userType.AddMemberName("Count");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                xamlType = userType;
                break;

            case "DataVirtualization.Toolkit.DataItem":
                userType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DataVirtualization.Toolkit.DataItem), GetXamlTypeByName("Object"));
                userType.Activator = Activate_4_DataItem;
                userType.AddMemberName("ID");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("Name");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Value");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("ExtraData");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.List<global::System.String>),
                                                   "System.Collections.Generic.List<String>");
                userType.AddMemberName("DataSymbol");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "System.Collections.Generic.List<String>":
                userType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.Generic.List<global::System.String>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.List<global::System.String>),
                                                   "System.Collections.Generic.List<String>");
                userType.Activator = Activate_5_List;
                userType.CollectionAdd = VectorAdd_5_List;
                xamlType = userType;
                break;

            case "DataVirtualization.Toolkit.PaletteCollection":
                userType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DataVirtualization.Toolkit.PaletteCollection), GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection<Windows.UI.Xaml.ResourceDictionary>"));
                userType.Activator = Activate_6_PaletteCollection;
                userType.CollectionAdd = VectorAdd_6_PaletteCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<Windows.UI.Xaml.ResourceDictionary>":
                userType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Windows.UI.Xaml.ResourceDictionary>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<Windows.UI.Xaml.ResourceDictionary>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Windows.UI.Xaml.ResourceDictionary>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Windows.UI.Xaml.ResourceDictionary>");
                userType.Activator = Activate_7_ObservableCollection;
                userType.CollectionAdd = VectorAdd_7_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<Windows.UI.Xaml.ResourceDictionary>":
                userType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::Windows.UI.Xaml.ResourceDictionary>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::Windows.UI.Xaml.ResourceDictionary>),
                                                   "System.Collections.ObjectModel.Collection<Windows.UI.Xaml.ResourceDictionary>");
                userType.Activator = Activate_8_Collection;
                userType.CollectionAdd = VectorAdd_8_Collection;
                userType.AddMemberName("Count");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                xamlType = userType;
                break;

            case "DataVirtualization.Toolkit.Legends.Legend":
                userType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DataVirtualization.Toolkit.Legends.Legend), GetXamlTypeByName("DataVirtualization.Toolkit.Legends.LegendBase"));
                userType.Activator = Activate_9_Legend;
                userType.AddMemberName("Orientation");
                xamlType = userType;
                break;

            case "DataVirtualization.Toolkit.Legends.LegendBase":
                userType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DataVirtualization.Toolkit.Legends.LegendBase), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("Palette");
                xamlType = userType;
                break;

            case "DataVirtualization.Toolkit.DataPoint.PieDataPoint":
                userType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DataVirtualization.Toolkit.DataPoint.PieDataPoint), GetXamlTypeByName("DataVirtualization.Toolkit.DataPoint.DataPoint"));
                userType.Activator = Activate_11_PieDataPoint;
                userType.AddMemberName("Fill");
                userType.AddMemberName("Radius");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("PushOut");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("InnerRadius");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("WedgeAngle");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("RotationAngle");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("CentreX");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("CentreY");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Percentage");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("PieceValue");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Data");
                xamlType = userType;
                break;

            case "DataVirtualization.Toolkit.DataPoint.DataPoint":
                userType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DataVirtualization.Toolkit.DataPoint.DataPoint), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_12_DataPoint;
                xamlType = userType;
                break;

            case "DataVirtualization.Toolkit.DataPoint.LineDataPoint":
                userType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DataVirtualization.Toolkit.DataPoint.LineDataPoint), GetXamlTypeByName("DataVirtualization.Toolkit.DataPoint.DataPoint"));
                userType.Activator = Activate_13_LineDataPoint;
                userType.AddMemberName("Point");
                userType.AddMemberName("CircleRadius");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("StrockThickness");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("FillPoint");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("Palette");
                xamlType = userType;
                break;

            case "DataVirtualization.Toolkit.Charting.PieChart":
                userType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DataVirtualization.Toolkit.Charting.PieChart), GetXamlTypeByName("DataVirtualization.Toolkit.Charting.Chart"));
                userType.Activator = Activate_14_PieChart;
                userType.AddMemberName("Palette");
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("HoleSize");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                xamlType = userType;
                break;

            case "DataVirtualization.Toolkit.Charting.Chart":
                userType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DataVirtualization.Toolkit.Charting.Chart), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_15_Chart;
                xamlType = userType;
                break;

            case "DataVirtualization.Toolkit.Legends.LegendItem":
                userType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DataVirtualization.Toolkit.Legends.LegendItem), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_16_LegendItem;
                userType.AddMemberName("SeriesColor");
                userType.AddMemberName("Text");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "DataVirtualizationToolkit.Themes.MyUserControl1":
                userType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DataVirtualizationToolkit.Themes.MyUserControl1), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_17_MyUserControl1;
                xamlType = userType;
                break;

            case "DataVirtualization.Toolkit.ToolTip":
                userType = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DataVirtualization.Toolkit.ToolTip), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_18_ToolTip;
                userType.AddMemberName("ParentGrid");
                xamlType = userType;
                break;

            }
            return xamlType;
        }


        private object get_0_PiePlotter_HoleSize(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.Plotter.PiePlotter)instance;
            return that.HoleSize;
        }
        private void set_0_PiePlotter_HoleSize(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.Plotter.PiePlotter)instance;
            that.HoleSize = (global::System.Double)Value;
        }
        private object get_1_PiePlotter_ItemsSource(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.Plotter.PiePlotter)instance;
            return that.ItemsSource;
        }
        private void set_1_PiePlotter_ItemsSource(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.Plotter.PiePlotter)instance;
            that.ItemsSource = (global::DataVirtualization.Toolkit.DataItemCollection)Value;
        }
        private object get_2_DataItem_ID(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.DataItem)instance;
            return that.ID;
        }
        private void set_2_DataItem_ID(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.DataItem)instance;
            that.ID = (global::System.Int32)Value;
        }
        private object get_3_DataItem_Name(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.DataItem)instance;
            return that.Name;
        }
        private void set_3_DataItem_Name(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.DataItem)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_4_DataItem_Value(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.DataItem)instance;
            return that.Value;
        }
        private void set_4_DataItem_Value(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.DataItem)instance;
            that.Value = (global::System.Double)Value;
        }
        private object get_5_DataItem_ExtraData(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.DataItem)instance;
            return that.ExtraData;
        }
        private void set_5_DataItem_ExtraData(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.DataItem)instance;
            that.ExtraData = (global::System.Collections.Generic.List<global::System.String>)Value;
        }
        private object get_6_DataItem_DataSymbol(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.DataItem)instance;
            return that.DataSymbol;
        }
        private void set_6_DataItem_DataSymbol(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.DataItem)instance;
            that.DataSymbol = (global::System.String)Value;
        }
        private object get_7_PiePlotter_PiePalette(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.Plotter.PiePlotter)instance;
            return that.PiePalette;
        }
        private void set_7_PiePlotter_PiePalette(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.Plotter.PiePlotter)instance;
            that.PiePalette = (global::DataVirtualization.Toolkit.PaletteCollection)Value;
        }
        private object get_8_Legend_Orientation(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.Legends.Legend)instance;
            return that.Orientation;
        }
        private void set_8_Legend_Orientation(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.Legends.Legend)instance;
            that.Orientation = (global::Windows.UI.Xaml.Controls.Orientation)Value;
        }
        private object get_9_LegendBase_ItemsSource(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.Legends.LegendBase)instance;
            return that.ItemsSource;
        }
        private void set_9_LegendBase_ItemsSource(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.Legends.LegendBase)instance;
            that.ItemsSource = (global::DataVirtualization.Toolkit.DataItemCollection)Value;
        }
        private object get_10_LegendBase_Palette(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.Legends.LegendBase)instance;
            return that.Palette;
        }
        private void set_10_LegendBase_Palette(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.Legends.LegendBase)instance;
            that.Palette = (global::DataVirtualization.Toolkit.PaletteCollection)Value;
        }
        private object get_11_PieDataPoint_Fill(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.PieDataPoint)instance;
            return that.Fill;
        }
        private void set_11_PieDataPoint_Fill(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.PieDataPoint)instance;
            that.Fill = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_12_PieDataPoint_Radius(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.PieDataPoint)instance;
            return that.Radius;
        }
        private void set_12_PieDataPoint_Radius(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.PieDataPoint)instance;
            that.Radius = (global::System.Double)Value;
        }
        private object get_13_PieDataPoint_PushOut(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.PieDataPoint)instance;
            return that.PushOut;
        }
        private void set_13_PieDataPoint_PushOut(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.PieDataPoint)instance;
            that.PushOut = (global::System.Double)Value;
        }
        private object get_14_PieDataPoint_InnerRadius(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.PieDataPoint)instance;
            return that.InnerRadius;
        }
        private void set_14_PieDataPoint_InnerRadius(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.PieDataPoint)instance;
            that.InnerRadius = (global::System.Double)Value;
        }
        private object get_15_PieDataPoint_WedgeAngle(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.PieDataPoint)instance;
            return that.WedgeAngle;
        }
        private void set_15_PieDataPoint_WedgeAngle(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.PieDataPoint)instance;
            that.WedgeAngle = (global::System.Double)Value;
        }
        private object get_16_PieDataPoint_RotationAngle(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.PieDataPoint)instance;
            return that.RotationAngle;
        }
        private void set_16_PieDataPoint_RotationAngle(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.PieDataPoint)instance;
            that.RotationAngle = (global::System.Double)Value;
        }
        private object get_17_PieDataPoint_CentreX(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.PieDataPoint)instance;
            return that.CentreX;
        }
        private void set_17_PieDataPoint_CentreX(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.PieDataPoint)instance;
            that.CentreX = (global::System.Double)Value;
        }
        private object get_18_PieDataPoint_CentreY(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.PieDataPoint)instance;
            return that.CentreY;
        }
        private void set_18_PieDataPoint_CentreY(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.PieDataPoint)instance;
            that.CentreY = (global::System.Double)Value;
        }
        private object get_19_PieDataPoint_Percentage(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.PieDataPoint)instance;
            return that.Percentage;
        }
        private object get_20_PieDataPoint_PieceValue(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.PieDataPoint)instance;
            return that.PieceValue;
        }
        private void set_20_PieDataPoint_PieceValue(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.PieDataPoint)instance;
            that.PieceValue = (global::System.Double)Value;
        }
        private object get_21_PieDataPoint_Data(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.PieDataPoint)instance;
            return that.Data;
        }
        private void set_21_PieDataPoint_Data(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.PieDataPoint)instance;
            that.Data = (global::DataVirtualization.Toolkit.DataItem)Value;
        }
        private object get_22_LineDataPoint_Point(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.LineDataPoint)instance;
            return that.Point;
        }
        private void set_22_LineDataPoint_Point(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.LineDataPoint)instance;
            that.Point = (global::Windows.Foundation.Point)Value;
        }
        private object get_23_LineDataPoint_CircleRadius(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.LineDataPoint)instance;
            return that.CircleRadius;
        }
        private void set_23_LineDataPoint_CircleRadius(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.LineDataPoint)instance;
            that.CircleRadius = (global::System.Double)Value;
        }
        private object get_24_LineDataPoint_StrockThickness(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.LineDataPoint)instance;
            return that.StrockThickness;
        }
        private void set_24_LineDataPoint_StrockThickness(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.LineDataPoint)instance;
            that.StrockThickness = (global::System.Double)Value;
        }
        private object get_25_LineDataPoint_FillPoint(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.LineDataPoint)instance;
            return that.FillPoint;
        }
        private void set_25_LineDataPoint_FillPoint(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.LineDataPoint)instance;
            that.FillPoint = (global::System.Boolean)Value;
        }
        private object get_26_LineDataPoint_Palette(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.LineDataPoint)instance;
            return that.Palette;
        }
        private void set_26_LineDataPoint_Palette(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.DataPoint.LineDataPoint)instance;
            that.Palette = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_27_PieChart_Palette(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.Charting.PieChart)instance;
            return that.Palette;
        }
        private void set_27_PieChart_Palette(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.Charting.PieChart)instance;
            that.Palette = (global::DataVirtualization.Toolkit.PaletteCollection)Value;
        }
        private object get_28_PieChart_ItemsSource(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.Charting.PieChart)instance;
            return that.ItemsSource;
        }
        private void set_28_PieChart_ItemsSource(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.Charting.PieChart)instance;
            that.ItemsSource = (global::DataVirtualization.Toolkit.DataItemCollection)Value;
        }
        private object get_29_PieChart_HoleSize(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.Charting.PieChart)instance;
            return that.HoleSize;
        }
        private void set_29_PieChart_HoleSize(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.Charting.PieChart)instance;
            that.HoleSize = (global::System.Double)Value;
        }
        private object get_30_LegendItem_SeriesColor(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.Legends.LegendItem)instance;
            return that.SeriesColor;
        }
        private void set_30_LegendItem_SeriesColor(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.Legends.LegendItem)instance;
            that.SeriesColor = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_31_LegendItem_Text(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.Legends.LegendItem)instance;
            return that.Text;
        }
        private void set_31_LegendItem_Text(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.Legends.LegendItem)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_32_Collection_Count(object instance)
        {
            var that = (global::System.Collections.ObjectModel.Collection<global::DataVirtualization.Toolkit.DataItem>)instance;
            return that.Count;
        }
        private object get_33_Collection_Count(object instance)
        {
            var that = (global::System.Collections.ObjectModel.Collection<global::Windows.UI.Xaml.ResourceDictionary>)instance;
            return that.Count;
        }
        private object get_34_ToolTip_ParentGrid(object instance)
        {
            var that = (global::DataVirtualization.Toolkit.ToolTip)instance;
            return that.ParentGrid;
        }
        private void set_34_ToolTip_ParentGrid(object instance, object Value)
        {
            var that = (global::DataVirtualization.Toolkit.ToolTip)instance;
            that.ParentGrid = (global::Windows.UI.Xaml.Controls.Grid)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember xamlMember = null;
            global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "DataVirtualization.Toolkit.Plotter.PiePlotter.HoleSize":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.Plotter.PiePlotter");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "HoleSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_PiePlotter_HoleSize;
                xamlMember.Setter = set_0_PiePlotter_HoleSize;
                break;
            case "DataVirtualization.Toolkit.Plotter.PiePlotter.ItemsSource":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.Plotter.PiePlotter");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "ItemsSource", "DataVirtualization.Toolkit.DataItemCollection");
                xamlMember.Getter = get_1_PiePlotter_ItemsSource;
                xamlMember.Setter = set_1_PiePlotter_ItemsSource;
                break;
            case "DataVirtualization.Toolkit.DataItem.ID":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.DataItem");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "ID", "Int32");
                xamlMember.Getter = get_2_DataItem_ID;
                xamlMember.Setter = set_2_DataItem_ID;
                break;
            case "DataVirtualization.Toolkit.DataItem.Name":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.DataItem");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_3_DataItem_Name;
                xamlMember.Setter = set_3_DataItem_Name;
                break;
            case "DataVirtualization.Toolkit.DataItem.Value":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.DataItem");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "Value", "Double");
                xamlMember.Getter = get_4_DataItem_Value;
                xamlMember.Setter = set_4_DataItem_Value;
                break;
            case "DataVirtualization.Toolkit.DataItem.ExtraData":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.DataItem");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "ExtraData", "System.Collections.Generic.List<String>");
                xamlMember.Getter = get_5_DataItem_ExtraData;
                xamlMember.Setter = set_5_DataItem_ExtraData;
                break;
            case "DataVirtualization.Toolkit.DataItem.DataSymbol":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.DataItem");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "DataSymbol", "String");
                xamlMember.Getter = get_6_DataItem_DataSymbol;
                xamlMember.Setter = set_6_DataItem_DataSymbol;
                break;
            case "DataVirtualization.Toolkit.Plotter.PiePlotter.PiePalette":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.Plotter.PiePlotter");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "PiePalette", "DataVirtualization.Toolkit.PaletteCollection");
                xamlMember.Getter = get_7_PiePlotter_PiePalette;
                xamlMember.Setter = set_7_PiePlotter_PiePalette;
                break;
            case "DataVirtualization.Toolkit.Legends.Legend.Orientation":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.Legends.Legend");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "Orientation", "Windows.UI.Xaml.Controls.Orientation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_Legend_Orientation;
                xamlMember.Setter = set_8_Legend_Orientation;
                break;
            case "DataVirtualization.Toolkit.Legends.LegendBase.ItemsSource":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.Legends.LegendBase");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "ItemsSource", "DataVirtualization.Toolkit.DataItemCollection");
                xamlMember.Getter = get_9_LegendBase_ItemsSource;
                xamlMember.Setter = set_9_LegendBase_ItemsSource;
                break;
            case "DataVirtualization.Toolkit.Legends.LegendBase.Palette":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.Legends.LegendBase");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "Palette", "DataVirtualization.Toolkit.PaletteCollection");
                xamlMember.Getter = get_10_LegendBase_Palette;
                xamlMember.Setter = set_10_LegendBase_Palette;
                break;
            case "DataVirtualization.Toolkit.DataPoint.PieDataPoint.Fill":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.DataPoint.PieDataPoint");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "Fill", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_PieDataPoint_Fill;
                xamlMember.Setter = set_11_PieDataPoint_Fill;
                break;
            case "DataVirtualization.Toolkit.DataPoint.PieDataPoint.Radius":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.DataPoint.PieDataPoint");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "Radius", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_PieDataPoint_Radius;
                xamlMember.Setter = set_12_PieDataPoint_Radius;
                break;
            case "DataVirtualization.Toolkit.DataPoint.PieDataPoint.PushOut":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.DataPoint.PieDataPoint");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "PushOut", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_PieDataPoint_PushOut;
                xamlMember.Setter = set_13_PieDataPoint_PushOut;
                break;
            case "DataVirtualization.Toolkit.DataPoint.PieDataPoint.InnerRadius":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.DataPoint.PieDataPoint");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "InnerRadius", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_PieDataPoint_InnerRadius;
                xamlMember.Setter = set_14_PieDataPoint_InnerRadius;
                break;
            case "DataVirtualization.Toolkit.DataPoint.PieDataPoint.WedgeAngle":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.DataPoint.PieDataPoint");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "WedgeAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_PieDataPoint_WedgeAngle;
                xamlMember.Setter = set_15_PieDataPoint_WedgeAngle;
                break;
            case "DataVirtualization.Toolkit.DataPoint.PieDataPoint.RotationAngle":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.DataPoint.PieDataPoint");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "RotationAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_PieDataPoint_RotationAngle;
                xamlMember.Setter = set_16_PieDataPoint_RotationAngle;
                break;
            case "DataVirtualization.Toolkit.DataPoint.PieDataPoint.CentreX":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.DataPoint.PieDataPoint");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "CentreX", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_PieDataPoint_CentreX;
                xamlMember.Setter = set_17_PieDataPoint_CentreX;
                break;
            case "DataVirtualization.Toolkit.DataPoint.PieDataPoint.CentreY":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.DataPoint.PieDataPoint");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "CentreY", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_PieDataPoint_CentreY;
                xamlMember.Setter = set_18_PieDataPoint_CentreY;
                break;
            case "DataVirtualization.Toolkit.DataPoint.PieDataPoint.Percentage":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.DataPoint.PieDataPoint");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "Percentage", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_PieDataPoint_Percentage;
                xamlMember.SetIsReadOnly();
                break;
            case "DataVirtualization.Toolkit.DataPoint.PieDataPoint.PieceValue":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.DataPoint.PieDataPoint");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "PieceValue", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_PieDataPoint_PieceValue;
                xamlMember.Setter = set_20_PieDataPoint_PieceValue;
                break;
            case "DataVirtualization.Toolkit.DataPoint.PieDataPoint.Data":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.DataPoint.PieDataPoint");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "Data", "DataVirtualization.Toolkit.DataItem");
                xamlMember.Getter = get_21_PieDataPoint_Data;
                xamlMember.Setter = set_21_PieDataPoint_Data;
                break;
            case "DataVirtualization.Toolkit.DataPoint.LineDataPoint.Point":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.DataPoint.LineDataPoint");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "Point", "Windows.Foundation.Point");
                xamlMember.Getter = get_22_LineDataPoint_Point;
                xamlMember.Setter = set_22_LineDataPoint_Point;
                break;
            case "DataVirtualization.Toolkit.DataPoint.LineDataPoint.CircleRadius":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.DataPoint.LineDataPoint");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "CircleRadius", "Double");
                xamlMember.Getter = get_23_LineDataPoint_CircleRadius;
                xamlMember.Setter = set_23_LineDataPoint_CircleRadius;
                break;
            case "DataVirtualization.Toolkit.DataPoint.LineDataPoint.StrockThickness":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.DataPoint.LineDataPoint");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "StrockThickness", "Double");
                xamlMember.Getter = get_24_LineDataPoint_StrockThickness;
                xamlMember.Setter = set_24_LineDataPoint_StrockThickness;
                break;
            case "DataVirtualization.Toolkit.DataPoint.LineDataPoint.FillPoint":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.DataPoint.LineDataPoint");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "FillPoint", "Boolean");
                xamlMember.Getter = get_25_LineDataPoint_FillPoint;
                xamlMember.Setter = set_25_LineDataPoint_FillPoint;
                break;
            case "DataVirtualization.Toolkit.DataPoint.LineDataPoint.Palette":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.DataPoint.LineDataPoint");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "Palette", "Windows.UI.Xaml.Media.Brush");
                xamlMember.Getter = get_26_LineDataPoint_Palette;
                xamlMember.Setter = set_26_LineDataPoint_Palette;
                break;
            case "DataVirtualization.Toolkit.Charting.PieChart.Palette":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.Charting.PieChart");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "Palette", "DataVirtualization.Toolkit.PaletteCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_PieChart_Palette;
                xamlMember.Setter = set_27_PieChart_Palette;
                break;
            case "DataVirtualization.Toolkit.Charting.PieChart.ItemsSource":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.Charting.PieChart");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "ItemsSource", "DataVirtualization.Toolkit.DataItemCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_PieChart_ItemsSource;
                xamlMember.Setter = set_28_PieChart_ItemsSource;
                break;
            case "DataVirtualization.Toolkit.Charting.PieChart.HoleSize":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.Charting.PieChart");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "HoleSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_PieChart_HoleSize;
                xamlMember.Setter = set_29_PieChart_HoleSize;
                break;
            case "DataVirtualization.Toolkit.Legends.LegendItem.SeriesColor":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.Legends.LegendItem");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "SeriesColor", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_LegendItem_SeriesColor;
                xamlMember.Setter = set_30_LegendItem_SeriesColor;
                break;
            case "DataVirtualization.Toolkit.Legends.LegendItem.Text":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.Legends.LegendItem");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_LegendItem_Text;
                xamlMember.Setter = set_31_LegendItem_Text;
                break;
            case "System.Collections.ObjectModel.Collection<DataVirtualization.Toolkit.DataItem>.Count":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Collections.ObjectModel.Collection<DataVirtualization.Toolkit.DataItem>");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "Count", "Int32");
                xamlMember.Getter = get_32_Collection_Count;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Collections.ObjectModel.Collection<Windows.UI.Xaml.ResourceDictionary>.Count":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Collections.ObjectModel.Collection<Windows.UI.Xaml.ResourceDictionary>");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "Count", "Int32");
                xamlMember.Getter = get_33_Collection_Count;
                xamlMember.SetIsReadOnly();
                break;
            case "DataVirtualization.Toolkit.ToolTip.ParentGrid":
                userType = (global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataVirtualization.Toolkit.ToolTip");
                xamlMember = new global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlMember(this, "ParentGrid", "Windows.UI.Xaml.Controls.Grid");
                xamlMember.Getter = get_34_ToolTip_ParentGrid;
                xamlMember.Setter = set_34_ToolTip_ParentGrid;
                break;
            }
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(global::System.String input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlSystemBaseType
    {
        global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public global::System.Object CreateFromString(global::System.String input)
        {
            if (_enumValues != null)
            {
                global::System.Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    global::System.Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( global::System.String.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::DataVirtualizationToolkit.DataVirtualization_Toolkit_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(global::System.String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


